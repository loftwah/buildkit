name: Mirror All Docker Images to GHCR

on:
  workflow_dispatch:  # Manual only, no fucking schedules

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq for Tag Parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch and Mirror All Image Versions
        env:
          GHCR_PREFIX: ghcr.io/${{ github.repository }}
        run: |
          # Function to get latest + 2 prior stable tags from Docker Hub
          get_tags() {
            IMAGE=$1
            REPO=$2
            # Use v2 API with authentication to avoid rate limits
            TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$REPO/$IMAGE:pull" | jq -r .token)
            curl -s -H "Authorization: Bearer $TOKEN" \
              "https://registry.hub.docker.com/v2/$REPO/$IMAGE/tags/list" | \
              jq -r '.tags[]' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | \
              sort -Vr | head -n 3
          }

          # Process each image
          for image in "buildkit:moby/buildkit" "ruby:library/ruby" "nginx:library/nginx" "node:library/node"; do
            IFS=':' read -r NAME REPO <<< "$image"
            echo "Fetching tags for $NAME from $REPO..."
            
            # Add retry mechanism
            for i in {1..3}; do
              TAGS=$(get_tags "$NAME" "$REPO")
              if [ ! -z "$TAGS" ]; then
                break
              fi
              echo "Attempt $i failed, retrying..."
              sleep 5
            done

            if [ -z "$TAGS" ]; then
              echo "No valid tags found for $NAME after 3 attempts, skipping."
              continue
            fi

            echo "Found tags: $TAGS"
            for TAG in $TAGS; do
              SOURCE="$REPO/$NAME:$TAG"
              TARGET="$GHCR_PREFIX/$NAME:$TAG"
              echo "Mirroring $SOURCE -> $TARGET"
              docker pull "$SOURCE" || { echo "Pull failed for $SOURCE, skipping"; continue; }
              docker tag "$SOURCE" "$TARGET"
              docker push "$TARGET" || { echo "Push failed for $TARGET, skipping"; continue; }
            done

            # Handle latest tag
            LATEST_SOURCE="$REPO/$NAME:latest"
            LATEST_TARGET="$GHCR_PREFIX/$NAME:latest"
            echo "Mirroring latest: $LATEST_SOURCE -> $LATEST_TARGET"
            docker pull "$LATEST_SOURCE" || { echo "Pull failed for $LATEST_SOURCE, skipping"; continue; }
            docker tag "$LATEST_SOURCE" "$LATEST_TARGET"
            docker push "$LATEST_TARGET" || { echo "Push failed for $LATEST_TARGET, skipping"; continue; }
          done
        shell: bash

      - name: Notify on Success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"âœ… Successfully mirrored all images for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true

      - name: Notify on Failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸš¨ All image mirroring failed for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true