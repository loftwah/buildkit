name: Mirror All Docker Images to GHCR

on:
  workflow_dispatch:  # Manual only, no schedules

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Mirror Images
        env:
          GHCR_PREFIX: ghcr.io/${{ github.repository }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Debug info
          echo "Starting mirror process..."
          echo "GHCR_PREFIX: $GHCR_PREFIX"
          
          debug_curl() {
            echo "Curl command failed. Response: $1"
            echo "HTTP Status: $2"
          }
          
          get_tags() {
            local REPO=$1
            echo "Fetching tags for ${REPO}..."
            
            echo "Attempting to get auth token..."
            local AUTH_RESPONSE=$(curl -s -f -w "%{http_code}" \
              -H "Content-Type: application/json" \
              -u "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${REPO}:pull")
            
            local HTTP_STATUS=${AUTH_RESPONSE: -3}
            local RESPONSE_BODY=${AUTH_RESPONSE:0:${#AUTH_RESPONSE}-3}
            
            if [ "$HTTP_STATUS" != "200" ]; then
              debug_curl "$RESPONSE_BODY" "$HTTP_STATUS"
              return 1
            fi
            
            local TOKEN=$(echo "$RESPONSE_BODY" | jq -r .token)
            
            local TAGS=$(curl -s -f -L \
              -H "Accept: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              "https://registry.hub.docker.com/v2/${REPO}/tags/list" | \
              jq -r '.tags[]' | \
              grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | \
              sed 's/^v//' | \
              sort -V -r | \
              head -n 3)
            
            if [ -z "$TAGS" ]; then
              echo "No valid tags found for ${REPO}"
              return 1
            fi
            
            echo "$TAGS"
          }
          
          mirror_image() {
            local SOURCE=$1
            local TARGET=$2
            echo "Mirroring: $SOURCE -> $TARGET"
            
            if ! docker pull "$SOURCE"; then
              echo "Failed to pull $SOURCE"
              return 1
            fi
            
            docker tag "$SOURCE" "$TARGET"
            
            if ! docker push "$TARGET"; then
              echo "Failed to push $TARGET"
              return 1
            fi
            
            echo "Successfully mirrored $SOURCE -> $TARGET"
          }
          
          # Define images with pull names
          IMAGES=("ruby" "nginx" "node" "moby/buildkit")
          
          for pull_name in "${IMAGES[@]}"; do
            # Determine repo_name and target_name
            if [[ "$pull_name" == */* ]]; then
              repo_name="$pull_name"              # e.g., moby/buildkit
              target_name=$(basename "$pull_name") # e.g., buildkit
            else
              repo_name="library/$pull_name"      # e.g., library/ruby
              target_name="$pull_name"            # e.g., ruby, node (not nodejs)
            fi
            echo "Processing $pull_name (repo: $repo_name, target: $target_name)"
            
            # Fetch tags with retries
            for attempt in {1..3}; do
              echo "Attempt $attempt to fetch tags for $repo_name"
              TAGS=$(get_tags "$repo_name")
              if [ $? -eq 0 ] && [ ! -z "$TAGS" ]; then
                break
              fi
              echo "Attempt $attempt failed, waiting 10s..."
              sleep 10
            done
            
            if [ -z "$TAGS" ]; then
              echo "Failed to get tags for $repo_name after 3 attempts"
              continue
            fi
            
            echo "Found tags for $pull_name: $TAGS"
            
            # Mirror each version
            echo "$TAGS" | while read -r TAG; do
              if [ ! -z "$TAG" ]; then
                SOURCE="${pull_name}:${TAG}"
                TARGET="${GHCR_PREFIX}/${target_name}:${TAG}"
                
                for attempt in {1..3}; do
                  echo "Attempt $attempt to mirror $SOURCE"
                  if mirror_image "$SOURCE" "$TARGET"; then
                    break
                  fi
                  echo "Attempt $attempt failed, waiting 10s..."
                  sleep 10
                done
              fi
            done
            
            # Mirror latest tag
            SOURCE="${pull_name}:latest"
            TARGET="${GHCR_PREFIX}/${target_name}:latest"
            echo "Mirroring latest tag"
            mirror_image "$SOURCE" "$TARGET"
            
            sleep 5
          done

      - name: Notify on Success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"âœ… Successfully mirrored all images for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true

      - name: Notify on Failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸš¨ All image mirroring failed for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true