name: Mirror All Docker Images to GHCR

on:
  workflow_dispatch:  # Manual only, no schedules

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Mirror Images
        env:
          GHCR_PREFIX: ghcr.io/${{ github.repository }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Debug info
          echo "Starting mirror process..."
          echo "GHCR_PREFIX: $GHCR_PREFIX"
          
          get_tags() {
            local IMAGE=$1
            local REPO=$2
            echo "Fetching tags for ${REPO}/${IMAGE}..."
            
            # Get Docker Hub API token
            local TOKEN=$(curl -s -f \
              -u "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${REPO}/${IMAGE}:pull" | jq -r .token)
            
            if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
              echo "Failed to get auth token for ${REPO}/${IMAGE}"
              return 1
            fi
            
            # Get tags using v2 API
            local TAGS=$(curl -s -f -L \
              -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/${REPO}/${IMAGE}/tags?page_size=100" | \
              jq -r '.results[].name' | \
              grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | \
              sed 's/^v//' | \
              sort -V -r | \
              head -n 3)
            
            if [ -z "$TAGS" ]; then
              echo "No valid tags found for ${REPO}/${IMAGE}"
              return 1
            fi
            
            echo "$TAGS"
          }
          
          mirror_image() {
            local SOURCE=$1
            local TARGET=$2
            echo "Mirroring: $SOURCE -> $TARGET"
            
            if ! docker pull "$SOURCE"; then
              echo "Failed to pull $SOURCE"
              return 1
            fi
            
            docker tag "$SOURCE" "$TARGET"
            
            if ! docker push "$TARGET"; then
              echo "Failed to push $TARGET"
              return 1
            fi
            
            echo "Successfully mirrored $SOURCE -> $TARGET"
          }
          
          # Process each image with retries
          IMAGES=(
            "buildkit:moby/buildkit"
            "ruby:library/ruby"
            "nginx:library/nginx"
            "node:library/node"
          )
          
          for image in "${IMAGES[@]}"; do
            IFS=':' read -r NAME REPO <<< "$image"
            echo "Processing $NAME from $REPO"
            
            # Try to get tags with retries
            for attempt in {1..3}; do
              echo "Attempt $attempt to fetch tags for $NAME"
              TAGS=$(get_tags "$NAME" "$REPO")
              if [ $? -eq 0 ] && [ ! -z "$TAGS" ]; then
                break
              fi
              echo "Attempt $attempt failed, waiting 10s..."
              sleep 10
            done
            
            if [ -z "$TAGS" ]; then
              echo "Failed to get tags for $NAME after 3 attempts"
              continue
            fi
            
            echo "Found tags for $NAME: $TAGS"
            
            # Mirror each version
            echo "$TAGS" | while read -r TAG; do
              if [ ! -z "$TAG" ]; then
                SOURCE="${REPO}/${NAME}:${TAG}"
                TARGET="${GHCR_PREFIX}/${NAME}:${TAG}"
                
                for attempt in {1..3}; do
                  echo "Attempt $attempt to mirror $SOURCE"
                  if mirror_image "$SOURCE" "$TARGET"; then
                    break
                  fi
                  echo "Attempt $attempt failed, waiting 10s..."
                  sleep 10
                done
              fi
            done
            
            # Handle latest tag
            SOURCE="${REPO}/${NAME}:latest"
            TARGET="${GHCR_PREFIX}/${NAME}:latest"
            echo "Mirroring latest tag"
            mirror_image "$SOURCE" "$TARGET"
            
            # Wait between images to avoid rate limits
            sleep 5
          done

      - name: Notify on Success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"âœ… Successfully mirrored all images for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true

      - name: Notify on Failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸš¨ All image mirroring failed for ${{ github.repository }}! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "$SLACK_WEBHOOK_URL"
        continue-on-error: true